{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/yue/Desktop/JSworkspace/simple-restful-apis/speakers-toolchain/src/ImageToggleOnScroll.js\";\nimport React, { useRef, useEffect, useState } from \"react\";\n\nconst ImageTogglerOnScroll = ({\n  primaryImg,\n  secondaryImg\n}) => {\n  const imageRef = useRef(null);\n\n  const isInView = () => {\n    const rect = imageRef.current.getBoundingClientRect();\n    return rect.top >= 0 && rect.bottom <= window.innerHeight;\n  };\n\n  const {\n    0: inView,\n    1: setInView\n  } = useState(false);\n  useEffect(() => {\n    window.addEventListener(\"scroll\", scrollHandler);\n    return () => {\n      window.removeEventListener(\"scroll\", scrollHandler);\n    };\n  }, []);\n\n  const scrollHandler = () => {\n    setInView(isInView());\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"img\", {\n    src: inView ? secondaryImg : primaryImg,\n    alt: \"\",\n    ref: imageRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 10\n  }, this);\n};\n\nexport default ImageTogglerOnScroll;","map":{"version":3,"sources":["/Users/yue/Desktop/JSworkspace/simple-restful-apis/speakers-toolchain/src/ImageToggleOnScroll.js"],"names":["React","useRef","useEffect","useState","ImageTogglerOnScroll","primaryImg","secondaryImg","imageRef","isInView","rect","current","getBoundingClientRect","top","bottom","window","innerHeight","inView","setInView","addEventListener","scrollHandler","removeEventListener"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;;AAEA,MAAMC,oBAAoB,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAAD,KAAkC;AAC7D,QAAMC,QAAQ,GAAGN,MAAM,CAAC,IAAD,CAAvB;;AACA,QAAMO,QAAQ,GAAG,MAAM;AACrB,UAAMC,IAAI,GAAGF,QAAQ,CAACG,OAAT,CAAiBC,qBAAjB,EAAb;AACA,WAAOF,IAAI,CAACG,GAAL,IAAY,CAAZ,IAAiBH,IAAI,CAACI,MAAL,IAAeC,MAAM,CAACC,WAA9C;AACD,GAHD;;AAIA,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBd,QAAQ,CAAC,KAAD,CAApC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,MAAM,CAACI,gBAAP,CAAwB,QAAxB,EAAkCC,aAAlC;AACA,WAAO,MAAM;AACXL,MAAAA,MAAM,CAACM,mBAAP,CAA2B,QAA3B,EAAqCD,aAArC;AACD,KAFD;AAGD,GALQ,EAKN,EALM,CAAT;;AAMA,QAAMA,aAAa,GAAG,MAAM;AAC1BF,IAAAA,SAAS,CAACT,QAAQ,EAAT,CAAT;AACD,GAFD;;AAGA,sBAAO;AAAK,IAAA,GAAG,EAAEQ,MAAM,GAAGV,YAAH,GAAkBD,UAAlC;AAA8C,IAAA,GAAG,EAAC,EAAlD;AAAqD,IAAA,GAAG,EAAEE;AAA1D;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAjBD;;AAmBA,eAAeH,oBAAf","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\n\nconst ImageTogglerOnScroll = ({ primaryImg, secondaryImg }) => {\n  const imageRef = useRef(null);\n  const isInView = () => {\n    const rect = imageRef.current.getBoundingClientRect();\n    return rect.top >= 0 && rect.bottom <= window.innerHeight;\n  };\n  const [inView, setInView] = useState(false);\n  useEffect(() => {\n    window.addEventListener(\"scroll\", scrollHandler);\n    return () => {\n      window.removeEventListener(\"scroll\", scrollHandler);\n    };\n  }, []);\n  const scrollHandler = () => {\n    setInView(isInView());\n  };\n  return <img src={inView ? secondaryImg : primaryImg} alt=\"\" ref={imageRef} />;\n};\n\nexport default ImageTogglerOnScroll;\n"]},"metadata":{},"sourceType":"module"}